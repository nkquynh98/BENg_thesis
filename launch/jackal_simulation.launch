<launch>
  <arg name="use_sim_time" default="true" />
  <arg name="gui" default="true" />
  <arg name="headless" default="false" />
  <!--arg name="world_name" default="$(find jackal_gazebo)/worlds/jackal_race.world" -->
  <arg name="world_name" default="$(find indoor_thesis)/worlds/complex_indoor.world" />
  <!--Spawn Rviz for visualization-->
  <arg name="rvizconfig" default="$(find indoor_thesis)/rviz/rviz_config_indoor.rviz"/>

  <!-- Short-term hack to support the original front_laser:=true argument for spawning
       the simulator. This will be removed in favour of using the config:=x arg instead. -->
  <arg name="front_laser" default="true" />
  <arg name="default_config" value="front_laser" if="$(arg front_laser)" />
  <arg name="default_config" value="base" unless="$(arg front_laser)" /> 
  <!-- end of hack -->

  <!-- Configuration of Jackal which you would like to simulate.
       See jackal_description for details. -->
  <arg name="config" default="$(arg default_config)" />

  <!-- Launch Gazebo with the specified world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="0" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="use_sim_time" value="$(arg use_sim_time)" />
    <arg name="headless" value="$(arg headless)" />
    <arg name="world_name" value="$(arg world_name)" />
  </include>

  <!-- Load Jackal's description, controllers, and teleop nodes. -->
  <include file="$(find jackal_description)/launch/description.launch">
    <arg name="config" value="$(arg config)" />
  </include>
  <include file="$(find jackal_control)/launch/control.launch" />
  <include file="$(find jackal_control)/launch/teleop.launch">
    <arg name="joystick" value="false"/>
  
  </include>

  <!--Spawn Rviz for visualization-->

  <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" />

 <!--<node name="teleop_key" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard"
         />--> 
  <!-- Spawn Jackal -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
	      args="-urdf -model jackal -param robot_description -x 0 -y 0 -z 1.0" />

   
 <!--- Run AMCL --> 
  <node pkg="amcl" type="amcl" name="amcl" output="screen">
    <remap from="scan" to="front/scan"/>

    <param name="odom_frame_id" value="odom"/>
    <param name="odom_model_type" value="diff-corrected"/>
    <param name="base_frame_id" value="base_link"/>
    <param name="update_min_d" value="0.1"/>
    <param name="update_min_a" value="0.2"/>
    <param name="min_particles" value="500"/>
    <param name="global_frame_id" value="map"/>
    <param name="tf_broadcast" value="true" />
    <param name="initial_pose_x" value="0.0"/>
    <param name="initial_pose_y" value="0.0"/>
    <param name="initial_pose_a" value="0.0"/>
  </node>
   
  <arg name="map_file" default="$(find indoor_thesis)/maps/complex_indoor.yaml"/>       <!-- path of map file -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" respawn="true" />
</launch>
